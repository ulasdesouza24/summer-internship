{
  "project_name": "mcp-gemini-client",
  "description": "MCP (Model Context Protocol) Weather Client - A Python-based weather service using MCP for real-time weather data and alerts",
  "tech_stack": {
    "backend": {
      "language": "Python",
      "version": ">=3.10",
      "framework": "FastMCP",
      "key_libraries": [
        "mcp[cli]>=1.2.0",
        "httpx>=0.28.1",
        "@modelcontextprotocol/sdk"
      ]
    },
    "frontend": {
      "language": "JavaScript/Node.js",
      "version": ">=18.0.0",
      "libraries": [
        "@google/generative-ai",
        "dotenv"
      ]
    },
    "apis": [
      "National Weather Service (NWS) API",
      "Google Gemini AI API"
    ]
  },
  "architecture": {
    "type": "MCP Server-Client",
    "components": [
      {
        "name": "Weather Server",
        "file": "weather-server-python/weather.py",
        "description": "FastMCP server providing weather tools via NWS API",
        "responsibilities": [
          "Weather forecast retrieval",
          "Weather alerts for US states",
          "Temperature conversion",
          "MCP protocol handling"
        ]
      },
      {
        "name": "MCP Client",
        "file": "client.py",
        "description": "Python client that connects to MCP weather server",
        "responsibilities": [
          "MCP protocol communication",
          "User input parsing",
          "Interactive chat interface",
          "City coordinate mapping"
        ]
      }
    ]
  },
  "features": [
    {
      "name": "Weather Forecast",
      "description": "Get detailed weather forecasts for US cities",
      "endpoints": ["get_forecast"],
      "parameters": ["latitude", "longitude"]
    },
    {
      "name": "Weather Alerts",
      "description": "Retrieve active weather alerts for US states",
      "endpoints": ["get_alerts"],
      "parameters": ["state"]
    },
    {
      "name": "Interactive Chat",
      "description": "Command-line interface for weather queries",
      "commands": ["/help", "/tools", "/quit"]
    },
    {
      "name": "City Recognition",
      "description": "Parse user input to identify supported US cities",
      "supported_cities": 35
    }
  ],
  "data_sources": {
    "primary": "National Weather Service API (api.weather.gov)",
    "coverage": "United States only",
    "data_types": ["forecasts", "alerts", "temperature", "wind"]
  },
  "configuration": {
    "mcp_config": "mcp-config.json",
    "package_config": "package.json",
    "python_config": "weather-server-python/pyproject.toml"
  },
  "supported_locations": [
    "New York", "Los Angeles", "Chicago", "Houston", "Phoenix",
    "Philadelphia", "San Antonio", "San Diego", "Dallas", "San Jose",
    "Austin", "Jacksonville", "San Francisco", "Columbus", "Charlotte",
    "Fort Worth", "Detroit", "El Paso", "Memphis", "Seattle",
    "Denver", "Washington", "Boston", "Nashville", "Baltimore",
    "Oklahoma City", "Portland", "Las Vegas", "Milwaukee", "Albuquerque",
    "Tucson", "Fresno", "Sacramento", "Miami", "Kansas City",
    "Mesa", "Atlanta", "Omaha", "Raleigh", "Colorado Springs",
    "Virginia Beach"
  ],
  "test_considerations": {
    "external_dependencies": ["NWS API availability", "Internet connectivity"],
    "environment_requirements": ["Python 3.10+", "Node.js 18+"],
    "key_test_areas": [
      "MCP protocol communication",
      "Weather API integration",
      "Error handling for invalid locations",
      "Temperature conversion accuracy",
      "User input parsing",
      "Alert system functionality"
    ]
  }
}
